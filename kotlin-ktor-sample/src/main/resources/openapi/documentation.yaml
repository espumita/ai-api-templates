openapi: "3.1.0"
info:
  title: "kotlin_ktor_sample API"
  description: "kotlin_ktor_sample API"
  version: "1.0.0"
servers:
  - url: "http://localhost:8080"
    description: "Local development server"
  - url: "https://kotlin_ktor_sample"
    description: "Docker container server"
paths:
  /:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Hello World!"
  /api/listings:
    get:
      description: "Get all listings with pagination"
      parameters:
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
        - name: "pageSize"
          in: "query"
          required: false
          schema:
            type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PaginatedListingsResponse"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
    post:
      description: "Create listing"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Listing"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Listing"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /api/listings/{id}:
    delete:
      description: "Delete listing"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "object"
        "204":
          description: "No Content"
          content:
            '*/*':
              schema:
                type: "object"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
    get:
      description: "Get single listing"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Listing"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
    put:
      description: "Update listing"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Listing"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Listing"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /api/listings/search:
    post:
      description: "Search and filter listings"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SearchResponse"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
components:
  schemas:
    Map:
      type: "object"
      properties: { }
    Map_String:
      type: "string"
    Price:
      type: "object"
      properties:
        currency:
          type: "string"
        amount:
          type: "number"
          format: "double"
      required:
        - "currency"
        - "amount"
    Location:
      type: "object"
      properties:
        country:
          type: "string"
        municipality:
          type: "string"
        geohash:
          type: "string"
      required:
        - "country"
        - "municipality"
        - "geohash"
    Listing:
      type: "object"
      properties:
        listingId:
          type: "string"
          format: "uuid"
        name:
          type: "string"
        description:
          type: "string"
        price:
          $ref: "#/components/schemas/Price"
        category:
          type: "string"
        location:
          $ref: "#/components/schemas/Location"
      required:
        - "listingId"
        - "name"
        - "description"
        - "price"
        - "category"
        - "location"
    PaginatedListingsResponse:
      type: "object"
      properties:
        items:
          type: "array"
          items:
            $ref: "#/components/schemas/Listing"
        totalItems:
          type: "integer"
          format: "int32"
        page:
          type: "integer"
          format: "int32"
        pageSize:
          type: "integer"
          format: "int32"
      required:
        - "items"
        - "totalItems"
        - "page"
        - "pageSize"
    Object:
      type: "object"
      properties: { }
    SearchFilter:
      type: "object"
      properties:
        field:
          type: "string"
        operator:
          type: "string"
          enum:
            - "CONTAINS"
            - "EQUALS"
        value:
          $ref: "#/components/schemas/Object"
      required:
        - "field"
        - "operator"
        - "value"
    SearchRequest:
      type: "object"
      properties:
        filters:
          type: "array"
          items:
            $ref: "#/components/schemas/SearchFilter"
        page:
          type: "integer"
          format: "int32"
          default: "1"
        pageSize:
          type: "integer"
          format: "int32"
          default: "10"
      required:
        - "filters"
        - "page"
        - "pageSize"
    SearchResponse:
      type: "object"
      properties:
        items:
          type: "array"
          items:
            $ref: "#/components/schemas/Listing"
        totalItems:
          type: "integer"
          format: "int32"
        page:
          type: "integer"
          format: "int32"
        pageSize:
          type: "integer"
          format: "int32"
        appliedFilters:
          type: "array"
          items:
            $ref: "#/components/schemas/SearchFilter"
      required:
        - "items"
        - "totalItems"
        - "page"
        - "pageSize"
        - "appliedFilters"