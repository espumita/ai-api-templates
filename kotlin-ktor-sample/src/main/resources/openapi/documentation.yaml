openapi: "3.1.0"
info:
  title: "kotlin_ktor_sample API"
  description: "kotlin_ktor_sample API"
  version: "1.0.0"
servers:
  - url: "http://localhost:8080"
    description: "Local development server"
  - url: "https://kotlin_ktor_sample"
    description: "Docker container server"
paths:
  /:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Hello World!"
  /api/listings:
    get:
      description: "Get all listings with pagination"
      parameters:
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
        - name: "pageSize"
          in: "query"
          required: false
          schema:
            type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
    post:
      description: "Create listing"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Listing"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Listing"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /api/listings/{id}:
    delete:
      description: "Delete listing"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "object"
        "204":
          description: "No Content"
          content:
            '*/*':
              schema:
                type: "object"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
    get:
      description: "Get single listing"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Listing"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
    put:
      description: "Update listing"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Listing"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "object"
        "204":
          description: "No Content"
          content:
            '*/*':
              schema:
                type: "object"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
components:
  schemas:
    Map:
      type: "object"
      properties: { }
    Map_String:
      type: "string"
    Price:
      type: "object"
      properties:
        currency:
          type: "string"
        amount:
          type: "number"
          format: "double"
      required:
        - "currency"
        - "amount"
    Listing:
      type: "object"
      properties:
        listingId:
          type: "string"
        name:
          type: "string"
        description:
          type: "string"
        price:
          $ref: "#/components/schemas/Price"
        category:
          type: "string"
      required:
        - "listingId"
        - "name"
        - "description"
        - "price"
        - "category"